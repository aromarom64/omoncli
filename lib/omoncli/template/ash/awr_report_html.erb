<%= render 'template/header.erb' %>

whenever oserror exit 9;
whenever sqlerror exit sql.sqlcode;

set serveroutput on feedback off
define ash_time_format = 'dd-mm-yyyy HH24:MI:SS';
variable oldest varchar2(30);
variable latest varchar2(30);
variable instnum number;
variable dbid number;
variable vbid number;
variable veid number;
variable vrpt number;
begin
  :vrpt := 8;
  select dbid into :dbid from v$database;
  :instnum := <%= @instance %>;
  :oldest := '<%= @bdate %>';
  :latest := '<%= @edate %>';
  select min(snap_id), max(snap_id) into :vbid, :veid
  from dba_hist_snapshot 
  where begin_interval_time between to_date(:oldest, '&ash_time_format') and to_date(:latest, '&ash_time_format')
  and instance_number = :instnum;
  dbms_output.put_line('Begin snap_id: ' || :vbid);
  dbms_output.put_line('End snap_id: ' || :veid);
  dbms_output.put_line('Begin date: ' || :oldest);
  dbms_output.put_line('End date: ' || :latest);
  dbms_output.put_line('Current sysdate: ' || sysdate);
  if (:vbid is null) or (:veid is null) then
    RAISE_APPLICATION_ERROR(-20000, 'Snap_id is null');
  elsif :veid <= :vbid then
    RAISE_APPLICATION_ERROR(-20001, 'Date range is invalid');
  end if;
end;
/


set trim on trims on linesize 1500 pagesize 0 echo off termout off heading off;

spool <%= @filenamespool %> append

select output from table(sys.dbms_workload_repository.AWR_REPORT_HTML(
  l_dbid => :dbid,
  l_inst_num => :instnum,
  l_bid => :vbid,
  l_eid => :veid,
  l_options => :vrpt
))
/


<%= render 'template/footer.erb' %>

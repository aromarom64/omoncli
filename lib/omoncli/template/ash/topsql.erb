<%= render 'template/header.erb' %>

variable vminutes number;
variable vtopnumber number;
begin
  :vminutes := <%= @minutes %>;
  :vtopnumber := <%= @topnum %>;
end;
/

alter session set nls_date_format = 'YYYY-MM-DD HH24:MI:SS'
/

set echo off feedback off heading on timi on pages 1000 lines 500 VERIFY OFF
col wait_profile for a40

spool <%= @filenamespool %> append
prompt Minutes: <%= @minutes %>
prompt Topnum: <%= @topnum %>

WITH sql_class AS
(select sql_id, state, count(*) occur from
  (select   sql_id
  ,  CASE  WHEN session_state = 'ON CPU' THEN 'CPU'
           WHEN session_state = 'WAITING' AND wait_class IN ('User I/O') THEN 'IO'
           WHEN session_state = 'WAITING' AND wait_class IN ('Cluster') THEN 'CLUSTER'
           ELSE 'WAIT' END state
    from gv$active_session_history
    where   session_type IN ( 'FOREGROUND')
    and sample_time  between trunc(sysdate,'MI') - :vminutes/24/60 and trunc(sysdate,'MI') )
    group by sql_id, state),
     ranked_sqls AS
(select SQL_ID, rank () over (order by sum(occur)desc) xrank
from sql_class
group by sql_id )
select sql_id, wait_profile from (
select sc.sql_id, rs.xrank,
rtrim(xmlagg(xmlelement(s, sc.state || '(' || sc.occur, '), ').extract('//text()') order by sc.occur desc),', ') as wait_profile
from sql_class sc, ranked_sqls rs
where rs.sql_id = sc.sql_id
and rs.xrank <= :vtopnumber
group by sc.sql_id, rs.xrank
order by rs.xrank)
/

<%= render 'template/footer.erb' %>

<%= render 'template/header.erb' %>

--variable vSQLID varchar2(30);
--begin
--  :vSQLID := '<%= @sql_id %>';
--end;
--/

alter session set nls_date_format = 'YYYY-MM-DD HH24:MI:SS'
/

set echo off feedback off heading on timi on pages 1000 lines 500 VERIFY OFF trim on trims on

col sql_plan_baseline for a30

spool <%= @filenamespool %> append
pro
pro SQL_ID= <%= @sql_id %>

select /*+ FIRST_ROWS(50) */ * from (
select inst_id,
plan_hash_value,
child_number,
object_status,
last_active_time,
executions,
is_obsolete,
is_bind_sensitive,
is_bind_aware,
is_shareable,
sql_plan_baseline,
row_number()over(order by child_number) rn
from gv$sql
where sql_id = '<%= @sql_id %>'
) where rn <= 50
order by child_number
/

set feedback off heading on timi on pages 200 lines 500 echo off  VERIFY OFF trim on trims on

col INST for 9999
col EXECS for 999999999999
col CHILD for 99999
col BIND_SENSE for a10
col BIND_AWARE for a10
col SHAREABLE for a10
col USE_FEEDBACK_STATS for a18
col OPTIMIZER_STATS for a16
col BIND_EQ_FAILURE for a16
col reason#1 for a40
col reason#2 for a40
col reason#3 for a40
col reason#4 for a40
col fix_control#1 for a40
col fix_control#2 for a40
col SQL_PLAN_BASELINE for a30
col SQL_PATCH for a30
col SQL_PROFILE for a64
col ROLL for a4
col REOPT for a5
col ADAPT for a5
col FIRST_LOAD_TIME for a20
col LAST_LOAD_TIME for a20
col PARSE_USER for a30
col SPD_Valid for a9
col SPD_Used  for a9
col CURSOR_STATUS for a19
col DS_LEVEL for a8
col DOP for a3
col DOP_REASON for a30

pro
pro SQL_ID= <%= @sql_id %> Shared Pool statistics

select s.inst_id                                                                           as INST,
       sum(s.EXECUTIONS)                                                                   as EXECS,
       max(s.last_load_time)                                                               as LAST_LOAD_TIME,
       max(s.last_active_time)                                                             as LAST_ACTIVE_TIME,
       round(sum(s.elapsed_time)/decode(sum(s.EXECUTIONS),0,1,sum(s.EXECUTIONS)))          as ELA_PER_EXEC,
       round(sum(s.cpu_time)/decode(sum(s.EXECUTIONS),0,1,sum(s.EXECUTIONS)))              as CPU_PER_EXEC,
       round(sum(s.parse_calls)/decode(sum(s.EXECUTIONS),0,1,sum(s.EXECUTIONS)))           as PARSES_PER_EXEC,
       round(sum(s.buffer_gets)/decode(sum(s.EXECUTIONS),0,1,sum(s.EXECUTIONS)))           as GETS_PER_EXEC,
       round(sum(s.disk_reads)/decode(sum(s.EXECUTIONS),0,1,sum(s.EXECUTIONS)))            as READS_PER_EXEC,
       round(sum(s.user_io_wait_time)/decode(sum(s.EXECUTIONS),0,1,sum(s.EXECUTIONS)))     as UIO_PER_EXEC,
       round(sum(s.concurrency_wait_time)/decode(sum(s.EXECUTIONS),0,1,sum(s.EXECUTIONS))) as CONC_PER_EXEC,
       round(sum(s.cluster_wait_time)/decode(sum(s.EXECUTIONS),0,1,sum(s.EXECUTIONS)))     as CLU_PER_EXEC,
       round(sum(s.PLSQL_EXEC_TIME)/decode(sum(s.EXECUTIONS),0,1,sum(s.EXECUTIONS)))       as PLSQL_PER_EXEC,
       round(sum(s.FETCHES)/decode(sum(s.EXECUTIONS),0,1,sum(s.EXECUTIONS)))               as FETCH_PER_EXEC,
       round(sum(s.ROWS_PROCESSED)/decode(sum(s.EXECUTIONS),0,1,sum(s.EXECUTIONS)))        as ROWS_PER_EXEC,
       s.PLAN_HASH_VALUE,
--       s.FULL_PLAN_HASH_VALUE,
       round(avg(s.optimizer_cost))                                                        as AVG_CBO_COST,
       count(distinct s.child_number)                                                      as CHILDS,
       max(s.IS_BIND_SENSITIVE)                                                            as "BIND_SENSE",
       max(s.IS_BIND_AWARE)                                                                as "BIND_AWARE",
--       max(s.IS_REOPTIMIZABLE)                                                             as "REOPT",
--       max(nvl(s.IS_RESOLVED_ADAPTIVE_PLAN,'N'))                                           as "ADAPT",
       s.SQL_PLAN_BASELINE,
       s.SQL_PATCH,
       s.OUTLINE_CATEGORY,
       s.SQL_PROFILE
  from gv$sql s
 where s.sql_id = '<%= @sql_id %>'
group by s.inst_id,
         s.PLAN_HASH_VALUE,
--         s.FULL_PLAN_HASH_VALUE,
         s.SQL_PLAN_BASELINE,
         s.SQL_PATCH,
         s.OUTLINE_CATEGORY,
         s.SQL_PROFILE
order by max(s.last_active_time)
--round(sum(s.elapsed_time)/decode(sum(s.EXECUTIONS),0,1,sum(s.EXECUTIONS))) desc
/

select st.inst_id as "INST",
    st.executions as execs,
    st.plan_hash_value as plan,
    round(st.elapsed_time/decode(st.executions,0,1,st.executions)) as ela_per_exec,
    round(st.cpu_time/decode(st.executions,0,1,st.executions)) as cpu_per_exec,
    round(st.buffer_gets/decode(st.executions,0,1,st.executions)) as gets_per_exec,
    round(st.concurrency_wait_time/decode(st.executions,0,1,st.executions)) as conc_per_exec,
    round(st.cluster_wait_time/decode(st.executions,0,1,st.executions)) as clu_per_exec,
    round(st.user_io_wait_time/decode(st.executions,0,1,st.executions)) as uio_per_exec,
    round(st.physical_read_bytes/decode(st.executions,0,1,st.executions)/1024/1024) as read_mb_per_exec,
    round(st.physical_read_requests/decode(st.executions,0,1,st.executions)) as reads_per_exec,
    round(st.disk_reads/decode(st.executions,0,1,st.executions)/1024/1024) as disk_reads_per_exec,
    round(st.physical_write_bytes/decode(st.executions,0,1,st.executions)/1024/1024) as writes_mb_per_exec,
    round(st.physical_write_requests/decode(st.executions,0,1,st.executions)) as writes_per_exec,
    round(st.direct_writes/decode(st.executions,0,1,st.executions)) as direct_writes_per_exec,
    round(st.rows_processed/decode(st.executions,0,1,st.executions)) as rows_per_exec,
    round(st.px_servers_executions/decode(st.executions,0,1,st.executions)) as px_per_exec
from gv$sqlstats st
where sql_id = '<%= @sql_id %>'
/

with plan_hashs as
 (select 'AWR' as SRC,
         SQL_ID,
         to_number(extractvalue(xmltype(other_xml), '/*/info[@type = "plan_hash_full"]')) as full_plan_hash_value,
         p.PLAN_HASH_VALUE,
         to_number(extractvalue(xmltype(other_xml), '/*/info[@type = "plan_hash_2"]'))    as plan_hash_2,
         p.TIMESTAMP
    from dba_hist_sql_plan p
   where p.other_xml is not null
     and sql_id = '<%= @sql_id %>'
  union
  select 'SQL' as SRC,
         sql_id,
         full_plan_hash_value,
         plan_hash_value,
         to_number(extractvalue(xmltype(other_xml), '/*/info[@type = "plan_hash_2"]'))    as plan_hash_2,
         max(TIMESTAMP)
    from gv$sql_plan
   where sql_id = '<%= @sql_id %>'
     and other_xml is not null
   group by sql_id, full_plan_hash_value, plan_hash_value, to_number(extractvalue(xmltype(other_xml), '/*/info[@type = "plan_hash_2"]')))
select SRC,
       sql_id,
       full_plan_hash_value,
       plan_hash_value,
       plan_hash_2,
       to_char(TIMESTAMP,'dd.mm.yyyy hh24:mi:ss') as TIMESTAMP
  from plan_hashs
 where full_plan_hash_value = nvl(null, full_plan_hash_value)
   and plan_hash_value = nvl(null, plan_hash_value)
order by 3, 4
/



<%= render 'template/footer.erb' %>

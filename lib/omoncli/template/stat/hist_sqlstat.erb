<%= render 'template/header.erb' %>

define ash_time_format = 'dd-mm-yyyy HH24:MI:SS';
variable oldest varchar2(30);
variable latest varchar2(30);
variable vSQLID varchar2(30);
begin
    :oldest := '<%= @bdate %>';
    :latest := '<%= @edate %>';
    :vSQLID := '<%= @sql_id %>';
end;
/

set echo off feedback off heading on timi on pages 1000 lines 500 VERIFY OFF

spool <%= @filenamespool %> append
prompt Sql_id: <%= @sql_id%>
prompt Bdate: <%= @bdate%>
prompt Edate: <%= @edate%>

col snap for 99999
col id for 9

select a.SNAP_ID snap,
a.instance_number id,
EXECUTIONS_DELTA EXECS_DELTA,
PLAN_HASH_VALUE,
OPTIMIZER_COST COST,
--OPTIMIZER_MODE OPT_MODE,
--round(ELAPSED_TIME_DELTA/decode(EXECUTIONS_DELTA,0,1,EXECUTIONS_DELTA)) ELA_PER_EXEC,
--round(CPU_TIME_DELTA/decode(EXECUTIONS_DELTA,0,1,EXECUTIONS_DELTA)) CPU_PER_EXEC,
--round(BUFFER_GETS_DELTA/decode(EXECUTIONS_DELTA,0,1,EXECUTIONS_DELTA)) GETS_PER_EXEC,
--round(ROWS_PROCESSED_DELTA/decode(EXECUTIONS_DELTA,0,1,EXECUTIONS_DELTA)) ROWS_PER_EXEC,
--round(IOWAIT_DELTA/decode(EXECUTIONS_DELTA,0,1,EXECUTIONS_DELTA)) IOW_PER_EXEC,
round(parse_calls_delta/decode(executions_delta,0,1,executions_delta),3)                   as PARSE_PER_EXEC,
round(elapsed_time_delta/decode(executions_delta,0,1,executions_delta))                    as ELA_PER_EXEC,
round(cpu_time_delta/decode(executions_delta,0,1,executions_delta))                        as CPU_PER_EXEC,
round(buffer_gets_delta/decode(executions_delta,0,1,executions_delta))                     as GETS_PER_EXEC,
round(disk_reads_delta/decode(executions_delta,0,1,executions_delta))                      as DISK_PER_EXEC,
--round(physical_read_bytes_delta/decode(executions_delta,0,1,executions_delta)/1024/1024)   as READ_MB_PER_EXEC,
--round(physical_read_requests_delta/decode(executions_delta,0,1,executions_delta))          as READS_PER_EXEC,
--round(physical_write_bytes_delta/decode(executions_delta,0,1,executions_delta)/1024/1024)  as WRITES_MB_PER_EXEC,
--round(physical_write_requests_delta/decode(executions_delta,0,1,executions_delta))         as WRITES_PER_EXEC,
round(direct_writes_delta/decode(executions_delta,0,1,executions_delta))                   as DIRECT_WRITES_PER_EXEC,
round(rows_processed_delta/decode(executions_delta,0,1,executions_delta))                  as ROWS_PER_EXEC,
round(fetches_delta/decode(executions_delta,0,1,executions_delta))                         as FETCHES_PER_EXEC,
round(iowait_delta/decode(executions_delta,0,1,executions_delta))                          as IOWAITS_PER_EXEC,
round(clwait_delta/decode(executions_delta,0,1,executions_delta))                          as CLWAITS_PER_EXEC,
round(apwait_delta/decode(executions_delta,0,1,executions_delta))                          as APWAITS_PER_EXEC,
round(ccwait_delta/decode(executions_delta,0,1,executions_delta))                          as CCWAITS_PER_EXEC,
round(parse_calls_delta/decode(executions_delta,0,1,executions_delta))                     as PARSE_PER_EXEC,
round(plsexec_time_delta/decode(executions_delta,0,1,executions_delta))                    as PLSQL_PER_EXEC,
round(px_servers_execs_delta/decode(executions_delta,0,1,executions_delta))                as PX_PER_EXEC,
to_char(b.begin_interval_time,'dd-mm:hh24') begdate
from dba_hist_sqlstat a, dba_hist_snapshot b
where a.snap_id=b.snap_id
and a.instance_number = b.instance_number
and a.sql_id = :vSQLID
and b.begin_interval_time between to_date(:oldest, '&ash_time_format') and to_date(:latest, '&ash_time_format')
order by a.snap_id desc, a.instance_number
/


<%= render 'template/footer.erb' %>
